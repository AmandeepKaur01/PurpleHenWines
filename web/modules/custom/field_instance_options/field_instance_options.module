<?php

use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\options\Plugin\Field\FieldType\ListItemBase;

/**
 * Implements hook_form_FORM_ID_form_alter().
 */
function field_instance_options_form_field_config_edit_form_alter(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Field\FieldConfigInterface $field */
  $field = $form_state->getFormObject()->getEntity();
  $storage = $field->getFieldStorageDefinition();
  $list_item_base = get_list_item_base();

  // For the PoC we only care about list string options.
  if ($field->getType() != 'list_string') {
    return;
  }
  // Ignore this field if the main storage doesn't use our callback.
  if ($storage->getSetting('allowed_values_function') !== '_field_instance_options_allowed_values') {
    return;
  }

  $allowed_values = $field->getThirdPartySetting('field_instance_options', 'instance_allowed_values', []);
  $array_allowed_values = $list_item_base->doAllowedValuesString($allowed_values);

  $form['field_instance_options']['instance_allowed_values'] = [
    '#type' => 'textarea',
    '#title' => t('Override options for this field instance'),
    '#default_value' => $array_allowed_values,
    '#description' => t('Options for this field instance as key|Labels. Do not remove values which are in the database.'),
    '#element_validate' => ['_field_instance_options_allowed_values_validate'],
  ];
  $form['#entity_builders'][] = '_field_instance_options_allowed_values_set';

}

/**
 * Implements hook_validate().
 */
function _field_instance_options_allowed_values_validate($element, &$form_state) {
  // Not testing whether database values are being removed.
  $element['#field_has_data'] = FALSE;
  $list_item_base = get_list_item_base();
  $list_item_base::validateAllowedValues($element, $form_state);
}

/**
 * Entity builder callback to save our settings into the field storage config.
 *
 * @param $entity_type
 *   Entity type.
 * @param $entity
 *   The entity.
 * @param $form
 *   The entity form.
 * @param FormStateInterface $form_state
 *   The form state.
 */
function _field_instance_options_allowed_values_set($entity_type, $entity, &$form, FormStateInterface $form_state) {
  $entity->setThirdPartySetting('field_instance_options', 'instance_allowed_values', $form_state->getValue('instance_allowed_values'));
}

/**
 * Get a class to access protected utility methods on the abstract class ListItemBase.
 */
function get_list_item_base() {
  return new class() extends ListItemBase {
    // Override constructor to not need config.
    public function __construct() {}
    // Implement interface we don't care about.
    public function allowedValuesDescription() {}
    public static function schema(FieldStorageDefinitionInterface $definition) {}
    public static function propertyDefinitions(FieldStorageDefinitionInterface $definition) {}
    // Methods we want to reuse nust be aliased because they are protected
    public function doExtractAllowedValues($string) { return $this->extractAllowedValues($string, FALSE); }
    public function doAllowedValuesString(array $values) { return self::allowedValuesString($values); }
  };
}

/**
 * Return options for field instance or combine options for all instances of the same type/name.
 *
 * @see callback_allowed_values_function()
 *
 * @return array
 *   The field values.
 */
function _field_instance_options_allowed_values(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL, &$cacheable = FALSE) {
  $instance_fields = \Drupal::service('entity_type.manager')->getStorage('field_config')->loadByProperties([
    'field_name' => $definition->getName(),
    'entity_type' => $definition->getTargetEntityTypeId(),
    'deleted' => FALSE,
  ]);

  $options = [];
  foreach ($instance_fields as $field) {
    $this_options = $field->getThirdPartySetting('field_instance_options', 'instance_allowed_values', []);
    if (!$entity || $entity->bundle() == $field->getTargetBundle()) {
      $options += $this_options;
    }
  }

  if ($entity && !$options) {
    \Drupal::messenger()->addWarning(t('The @callback is set for the @name field on the @bundle bundle, however no options have been defined on the field instance.', [
      '@callback' => __FUNCTION__,
      '@name' => $definition->getName(),
      '@bundle' => $entity->bundle(),
    ]));
  }

  return $options;
}
